syntax = "proto3";

package strata.bitvm2.p2p.v1;

message GenesisInfo {
  // output number of pre stake tx
  uint32 pre_stake_vout = 1;
  // transaction hash of pre stake tx
  bytes pre_stake_txid = 2;
  // keys Y_{i, j}
  repeated bytes checkpoint_pubkeys = 3;
}

message DepositSetupExchange {
  // 32-byte hash of some unique to deposit data
  bytes scope = 1;
  // Some arbitrary payload which depends on the implementation.
  bytes payload = 2;
}

message Musig2NoncesExchange {
  // 32-byte hash of some unique to deposit data
  bytes session_id = 1;
  // Public nonces for each transaction
  repeated bytes pub_nonces = 2;
}

message Musig2SignaturesExchange {
  // 32-byte hash of some unique to deposit data
  bytes session_id = 1;
  // Partial signatures for each transaction
  repeated bytes partial_sigs = 2;
}

message Wots32KeysExchange {
  // 32-byte has of some unique to deposit data
  bytes session_id = 1;
  // Secondary identifier.
  uint32 wots_id = 2;
  // Public keys for each deposit
  repeated bytes keys = 3;
}

message Wots160KeysExchange {
  // 32-byte has of some unique to deposit data
  bytes session_id = 1;
  // Secondary identifier.
  uint32 wots_id = 2;
  // Public keys for each deposit
  repeated bytes keys = 3;
}

message Wots256KeysExchange {
  // 32-byte has of some unique to deposit data
  bytes session_id = 1;
  // Secondary identifier.
  uint32 wots_id = 2;
  // Public keys for each deposit
  repeated bytes keys = 3;
}

message GossipsubMsg {
  oneof body {
    GenesisInfo genesis_info = 1;
    DepositSetupExchange setup = 2;
    Musig2NoncesExchange nonce = 3;
    Musig2SignaturesExchange sigs = 4;
    Wots32KeysExchange wots_32_keys = 5;
    Wots160KeysExchange wots_160_keys = 6;
    Wots256KeysExchange wots_256_keys = 7;
  }
  // Public key of the operator used for P2P message signing only.
  bytes key = 10;
  // Signature of concatenated content of body (without protobuf
  // serialization).
  bytes signature = 11;
}
